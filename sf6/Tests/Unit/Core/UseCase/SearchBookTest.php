<?php

namespace App\Tests\Unit\Core\UseCase;

use App\Core\UseCase\AuthorFindByName;
use App\Core\UseCase\SearchBook;
use App\Infra\Entity\Book;
use App\Infra\Repository\AuthorRepository;
use App\Infra\Repository\BookRepository;
use PHPUnit\Framework\TestCase;

class SearchBookTest extends TestCase
{
    protected BookRepository $repositoryMock;
    protected SearchBook $useCase;
    public function setUp(): void
    {
        $this->repositoryMock = $this->getMockBuilder(BookRepository::class)
            ->disableOriginalConstructor()
            ->onlyMethods(['search'])
            ->getMock();

        parent::setUp(); // TODO: Change the autogenerated stub

        $this->useCase = new SearchBook($this->repositoryMock);
    }

    public function testShouldReturnBookEntityWhenFoundByName(){
        $Book = new Book();
        $Book->setName("NewBook");
        $this->repositoryMock->expects(self::once())->method('search')->willReturn($Book);

        $response = $this->useCase->handler('NewBook');
        $this->assertTrue($response instanceof Book);
        $this->assertEquals('NewBook', $response->getName());
    }

    public function testShouldReturnNullWhenNotFound(){
        $this->repositoryMock->expects(self::once())->method('search')->willReturn(null);

        $response = $this->useCase->handler('NotFoundBook');
        $this->assertNull($response);
    }
}