<?php

namespace App\Tests\Functional;

use ApiPlatform\Symfony\Bundle\Test\ApiTestCase;
use App\Infra\Factory\AuthorFactory;
use App\Infra\Factory\BookFactory;
use App\Infra\Factory\PublisherFactory;
use Zenstruck\Foundry\Test\Factories;
use Zenstruck\Foundry\Test\ResetDatabase;

class BookCreateOrUpdateTest extends ApiTestCase
{
    use ResetDatabase, Factories;

    protected $publishers;

    protected $authors;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->authors = AuthorFactory::createMany(10);
        $this->publishers = PublisherFactory::createMany(10);
    }

    /**
     * @return void
     * @throws \Symfony\Contracts\HttpClient\Exception\TransportExceptionInterface
     */
    public function testShouldReturnStatusCode200WhenBookUpdateCorrectly()
    {
        $book = BookFactory::createMany(1);

       $response = static::createClient()->request('POST', '/api/v1/book',
            ['json' =>
                [
                    'id' => $book[0]->getId(),
                    'name' => 'Book3',
                    'ISBN' => 123,
                    'author' => $this->authors[0]->getName(),
                    'publisher' => $this->publishers[0]->getName()
                ]
            ]
        );
        $this->assertResponseStatusCodeSame(200);
        $this->assertEquals('The title Book3 was created/updated!', $response->toArray()['message']);
    }

    /**
     * @return void
     * @throws \Symfony\Contracts\HttpClient\Exception\TransportExceptionInterface
     */
    public function testShouldReturnStatusCode200WhenBookCreateCorrectly()
    {

        $response = static::createClient()->request('POST', '/api/v1/book',
            ['json' =>
                [
                    'name' => 'Book1',
                    'ISBN' => 123,
                    'author' => $this->authors[0]->getName(),
                    'publisher' => $this->publishers[0]->getName()
                ]
            ]
        );
        $this->assertResponseStatusCodeSame(200);
        $this->assertEquals('The title Book1 was created/updated!', $response->toArray()['message']);
    }

    /**
     * @dataProvider payloadProvider
     */
    public function testShouldReturnStatusCode404WhenAuthorNotFound()
    {

        static::createClient()->request('POST', '/api/v1/book',
            ['json' =>
                [
                    'name' => 'Book1',
                    'ISBN' => 123,
                    'author' => 'Author',
                    'publisher' => $this->publishers[0]->getName()
                ]
            ]
        );

        $this->assertResponseStatusCodeSame(404);
    }

    /**
     * @dataProvider payloadProvider
     */
    public function testShouldReturnStatusCode404WhenPublisherNotFound()
    {

        static::createClient()->request('POST', '/api/v1/book',
            ['json' =>
                [
                    'name' => 'Book1',
                    'ISBN' => 123,
                    'author' => $this->authors[0]->getName(),
                    'publisher' => 'Publisher'
                ]
            ]
        );

        $this->assertResponseStatusCodeSame(404);
    }

    /**
     * @dataProvider payloadProvider
     */
    public function testShouldReturnJsonResponseWith404WhenPayloadValidationFailed($payload)
    {

        $merged = array_merge(
            $payload, ['author' => $this->authors[0]->getName(), 'publisher' => $this->publishers[0]->getName()]
        );

        static::createClient()->request('POST', '/api/v1/book', ['json' => $merged ]);

        $this->assertResponseStatusCodeSame(404);
    }

    /**
     * @return \array[][]
     */
    public function payloadProvider()
    {
        return [
            [
                [
                    'name' => 'Book1',
                    'ISBN' => '123',
                ]
            ],
            [
                [
                    'name' => '',
                    'ISBN' => 111,
                ]
            ],
        ];
    }

}